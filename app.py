# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wmwp0-DOz8HLELn6QnuUSrs9EQ6zo7rP
"""



import streamlit as st
import fitz  # PyMuPDF
import json
import requests

# --- Azure OpenAI config ---
AZURE_ENDPOINT = "https://shour-ma9lclp2-eastus2.cognitiveservices.azure.com/"
DEPLOYMENT_NAME = "gpt-4.1"
API_VERSION = "2024-12-01-preview"
API_KEY = st.secrets["AZURE_API_KEY"]  # We'll set this in Streamlit Cloud secrets

headers = {
    "api-key": API_KEY,
    "Content-Type": "application/json"
}

def azure_openai_chat(messages, max_tokens=800, temperature=0):
    url = f"{AZURE_ENDPOINT}/openai/deployments/{DEPLOYMENT_NAME}/chat/completions?api-version={API_VERSION}"
    payload = {
        "messages": messages,
        "max_tokens": max_tokens,
        "temperature": temperature,
        "n": 1,
    }
    response = requests.post(url, headers=headers, json=payload)
    response.raise_for_status()
    data = response.json()
    return data["choices"][0]["message"]["content"]

def extract_text_from_pdf(file):
    doc = fitz.open(stream=file.read(), filetype="pdf")
    text = ""
    for page in doc:
        text += page.get_text()
    return text

st.title("Resume Checker")

st.markdown("Upload Job Description PDF and Candidate CV PDF to get compatibility score and suggestions.")

jd_file = st.file_uploader("Upload Job Description PDF", type=["pdf"])
cv_file = st.file_uploader("Upload Candidate CV PDF", type=["pdf"])

if jd_file and cv_file:
    with st.spinner("Extracting text from PDFs..."):
        jd_text = extract_text_from_pdf(jd_file)
        cv_text = extract_text_from_pdf(cv_file)

    st.markdown("### Extracted Job Description Text (preview)")
    st.text(jd_text[:1000] + "..." if len(jd_text) > 1000 else jd_text)

    prompt_jd = f"""
You are a helpful assistant. Extract the following from the job description text below:

1. Key Skillsets (bullet list)
2. Job Responsibilities (bullet list)
3. Job Requirements (bullet list)

Job Description:
\"\"\"
{jd_text}
\"\"\"

Provide your answer in JSON format with keys: "skills", "responsibilities", "requirements".
"""
    messages_jd = [
        {"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": prompt_jd},
    ]

    with st.spinner("Analyzing Job Description..."):
        jd_info_raw = azure_openai_chat(messages_jd, max_tokens=700, temperature=0)
    try:
        jd_info = json.loads(jd_info_raw)
    except Exception as e:
        st.error(f"Failed to parse JD info JSON: {e}")
        st.text(jd_info_raw)
        jd_info = None

    def format_list_as_markdown(items):
        if not items:
            return "No data found."
        return "\n".join(f"- {item}" for item in items)

    if jd_info:
        st.markdown("### Extracted Job Description Information")
        st.markdown("**Skills:**")
        st.markdown(format_list_as_markdown(jd_info.get("skills", [])))

        st.markdown("**Responsibilities:**")
        st.markdown(format_list_as_markdown(jd_info.get("responsibilities", [])))

        st.markdown("**Requirements:**")
        st.markdown(format_list_as_markdown(jd_info.get("requirements", [])))
    else:
        st.error("Failed to extract job description information.")


    prompt_comp = f"""
You are a recruiter assistant.

Given the job description information:

Skills: {', '.join(jd_info.get('skills', []))}
Responsibilities: {', '.join(jd_info.get('responsibilities', []))}
Requirements: {', '.join(jd_info.get('requirements', []))}

And the candidate's CV text:

\"\"\"
{cv_text}
\"\"\"

Please:
1. Provide a compatibility score between 0 and 100 based on how well the candidate matches the job.
2. Provide a brief explanation of the score.

Respond in JSON format with keys: "score" (integer), "explanation" (string).
"""
    messages_comp = [
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": prompt_comp},
        ]

    with st.spinner("Computing compatibility score..."):
            comp_raw = azure_openai_chat(messages_comp, max_tokens=300, temperature=0)
    try:
            comp_info = json.loads(comp_raw)
            st.markdown(f"## Compatibility Score: {comp_info['score']}/100")
            st.markdown("### Suggestions / Explanation:")
            st.write(comp_info["explanation"])
    except Exception as e:
            st.error(f"Failed to parse compatibility JSON: {e}")
            st.text(comp_raw)
else:
    st.error("Could not extract job description information.")
